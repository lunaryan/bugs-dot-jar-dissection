/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.tabletserver.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class TabletStats implements org.apache.thrift.TBase<TabletStats, TabletStats._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TabletStats");

  private static final org.apache.thrift.protocol.TField EXTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("extent", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField("major", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MINOR_FIELD_DESC = new org.apache.thrift.protocol.TField("minor", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SPLIT_FIELD_DESC = new org.apache.thrift.protocol.TField("split", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("numEntries", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField INGEST_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ingestRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryRate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SPLIT_CREATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("splitCreationTime", org.apache.thrift.protocol.TType.I64, (short)8);

  public org.apache.accumulo.core.data.thrift.TKeyExtent extent;
  public ActionStats major;
  public ActionStats minor;
  public ActionStats split;
  public long numEntries;
  public double ingestRate;
  public double queryRate;
  public long splitCreationTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXTENT((short)1, "extent"),
    MAJOR((short)2, "major"),
    MINOR((short)3, "minor"),
    SPLIT((short)4, "split"),
    NUM_ENTRIES((short)5, "numEntries"),
    INGEST_RATE((short)6, "ingestRate"),
    QUERY_RATE((short)7, "queryRate"),
    SPLIT_CREATION_TIME((short)8, "splitCreationTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXTENT
          return EXTENT;
        case 2: // MAJOR
          return MAJOR;
        case 3: // MINOR
          return MINOR;
        case 4: // SPLIT
          return SPLIT;
        case 5: // NUM_ENTRIES
          return NUM_ENTRIES;
        case 6: // INGEST_RATE
          return INGEST_RATE;
        case 7: // QUERY_RATE
          return QUERY_RATE;
        case 8: // SPLIT_CREATION_TIME
          return SPLIT_CREATION_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMENTRIES_ISSET_ID = 0;
  private static final int __INGESTRATE_ISSET_ID = 1;
  private static final int __QUERYRATE_ISSET_ID = 2;
  private static final int __SPLITCREATIONTIME_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXTENT, new org.apache.thrift.meta_data.FieldMetaData("extent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.accumulo.core.data.thrift.TKeyExtent.class)));
    tmpMap.put(_Fields.MAJOR, new org.apache.thrift.meta_data.FieldMetaData("major", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActionStats.class)));
    tmpMap.put(_Fields.MINOR, new org.apache.thrift.meta_data.FieldMetaData("minor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActionStats.class)));
    tmpMap.put(_Fields.SPLIT, new org.apache.thrift.meta_data.FieldMetaData("split", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActionStats.class)));
    tmpMap.put(_Fields.NUM_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("numEntries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INGEST_RATE, new org.apache.thrift.meta_data.FieldMetaData("ingestRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUERY_RATE, new org.apache.thrift.meta_data.FieldMetaData("queryRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPLIT_CREATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("splitCreationTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TabletStats.class, metaDataMap);
  }

  public TabletStats() {
  }

  public TabletStats(
    org.apache.accumulo.core.data.thrift.TKeyExtent extent,
    ActionStats major,
    ActionStats minor,
    ActionStats split,
    long numEntries,
    double ingestRate,
    double queryRate,
    long splitCreationTime)
  {
    this();
    this.extent = extent;
    this.major = major;
    this.minor = minor;
    this.split = split;
    this.numEntries = numEntries;
    setNumEntriesIsSet(true);
    this.ingestRate = ingestRate;
    setIngestRateIsSet(true);
    this.queryRate = queryRate;
    setQueryRateIsSet(true);
    this.splitCreationTime = splitCreationTime;
    setSplitCreationTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TabletStats(TabletStats other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetExtent()) {
      this.extent = new org.apache.accumulo.core.data.thrift.TKeyExtent(other.extent);
    }
    if (other.isSetMajor()) {
      this.major = new ActionStats(other.major);
    }
    if (other.isSetMinor()) {
      this.minor = new ActionStats(other.minor);
    }
    if (other.isSetSplit()) {
      this.split = new ActionStats(other.split);
    }
    this.numEntries = other.numEntries;
    this.ingestRate = other.ingestRate;
    this.queryRate = other.queryRate;
    this.splitCreationTime = other.splitCreationTime;
  }

  public TabletStats deepCopy() {
    return new TabletStats(this);
  }

  @Override
  public void clear() {
    this.extent = null;
    this.major = null;
    this.minor = null;
    this.split = null;
    setNumEntriesIsSet(false);
    this.numEntries = 0;
    setIngestRateIsSet(false);
    this.ingestRate = 0.0;
    setQueryRateIsSet(false);
    this.queryRate = 0.0;
    setSplitCreationTimeIsSet(false);
    this.splitCreationTime = 0;
  }

  public org.apache.accumulo.core.data.thrift.TKeyExtent getExtent() {
    return this.extent;
  }

  public TabletStats setExtent(org.apache.accumulo.core.data.thrift.TKeyExtent extent) {
    this.extent = extent;
    return this;
  }

  public void unsetExtent() {
    this.extent = null;
  }

  /** Returns true if field extent is set (has been assigned a value) and false otherwise */
  public boolean isSetExtent() {
    return this.extent != null;
  }

  public void setExtentIsSet(boolean value) {
    if (!value) {
      this.extent = null;
    }
  }

  public ActionStats getMajor() {
    return this.major;
  }

  public TabletStats setMajor(ActionStats major) {
    this.major = major;
    return this;
  }

  public void unsetMajor() {
    this.major = null;
  }

  /** Returns true if field major is set (has been assigned a value) and false otherwise */
  public boolean isSetMajor() {
    return this.major != null;
  }

  public void setMajorIsSet(boolean value) {
    if (!value) {
      this.major = null;
    }
  }

  public ActionStats getMinor() {
    return this.minor;
  }

  public TabletStats setMinor(ActionStats minor) {
    this.minor = minor;
    return this;
  }

  public void unsetMinor() {
    this.minor = null;
  }

  /** Returns true if field minor is set (has been assigned a value) and false otherwise */
  public boolean isSetMinor() {
    return this.minor != null;
  }

  public void setMinorIsSet(boolean value) {
    if (!value) {
      this.minor = null;
    }
  }

  public ActionStats getSplit() {
    return this.split;
  }

  public TabletStats setSplit(ActionStats split) {
    this.split = split;
    return this;
  }

  public void unsetSplit() {
    this.split = null;
  }

  /** Returns true if field split is set (has been assigned a value) and false otherwise */
  public boolean isSetSplit() {
    return this.split != null;
  }

  public void setSplitIsSet(boolean value) {
    if (!value) {
      this.split = null;
    }
  }

  public long getNumEntries() {
    return this.numEntries;
  }

  public TabletStats setNumEntries(long numEntries) {
    this.numEntries = numEntries;
    setNumEntriesIsSet(true);
    return this;
  }

  public void unsetNumEntries() {
    __isset_bit_vector.clear(__NUMENTRIES_ISSET_ID);
  }

  /** Returns true if field numEntries is set (has been assigned a value) and false otherwise */
  public boolean isSetNumEntries() {
    return __isset_bit_vector.get(__NUMENTRIES_ISSET_ID);
  }

  public void setNumEntriesIsSet(boolean value) {
    __isset_bit_vector.set(__NUMENTRIES_ISSET_ID, value);
  }

  public double getIngestRate() {
    return this.ingestRate;
  }

  public TabletStats setIngestRate(double ingestRate) {
    this.ingestRate = ingestRate;
    setIngestRateIsSet(true);
    return this;
  }

  public void unsetIngestRate() {
    __isset_bit_vector.clear(__INGESTRATE_ISSET_ID);
  }

  /** Returns true if field ingestRate is set (has been assigned a value) and false otherwise */
  public boolean isSetIngestRate() {
    return __isset_bit_vector.get(__INGESTRATE_ISSET_ID);
  }

  public void setIngestRateIsSet(boolean value) {
    __isset_bit_vector.set(__INGESTRATE_ISSET_ID, value);
  }

  public double getQueryRate() {
    return this.queryRate;
  }

  public TabletStats setQueryRate(double queryRate) {
    this.queryRate = queryRate;
    setQueryRateIsSet(true);
    return this;
  }

  public void unsetQueryRate() {
    __isset_bit_vector.clear(__QUERYRATE_ISSET_ID);
  }

  /** Returns true if field queryRate is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryRate() {
    return __isset_bit_vector.get(__QUERYRATE_ISSET_ID);
  }

  public void setQueryRateIsSet(boolean value) {
    __isset_bit_vector.set(__QUERYRATE_ISSET_ID, value);
  }

  public long getSplitCreationTime() {
    return this.splitCreationTime;
  }

  public TabletStats setSplitCreationTime(long splitCreationTime) {
    this.splitCreationTime = splitCreationTime;
    setSplitCreationTimeIsSet(true);
    return this;
  }

  public void unsetSplitCreationTime() {
    __isset_bit_vector.clear(__SPLITCREATIONTIME_ISSET_ID);
  }

  /** Returns true if field splitCreationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSplitCreationTime() {
    return __isset_bit_vector.get(__SPLITCREATIONTIME_ISSET_ID);
  }

  public void setSplitCreationTimeIsSet(boolean value) {
    __isset_bit_vector.set(__SPLITCREATIONTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXTENT:
      if (value == null) {
        unsetExtent();
      } else {
        setExtent((org.apache.accumulo.core.data.thrift.TKeyExtent)value);
      }
      break;

    case MAJOR:
      if (value == null) {
        unsetMajor();
      } else {
        setMajor((ActionStats)value);
      }
      break;

    case MINOR:
      if (value == null) {
        unsetMinor();
      } else {
        setMinor((ActionStats)value);
      }
      break;

    case SPLIT:
      if (value == null) {
        unsetSplit();
      } else {
        setSplit((ActionStats)value);
      }
      break;

    case NUM_ENTRIES:
      if (value == null) {
        unsetNumEntries();
      } else {
        setNumEntries((Long)value);
      }
      break;

    case INGEST_RATE:
      if (value == null) {
        unsetIngestRate();
      } else {
        setIngestRate((Double)value);
      }
      break;

    case QUERY_RATE:
      if (value == null) {
        unsetQueryRate();
      } else {
        setQueryRate((Double)value);
      }
      break;

    case SPLIT_CREATION_TIME:
      if (value == null) {
        unsetSplitCreationTime();
      } else {
        setSplitCreationTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXTENT:
      return getExtent();

    case MAJOR:
      return getMajor();

    case MINOR:
      return getMinor();

    case SPLIT:
      return getSplit();

    case NUM_ENTRIES:
      return new Long(getNumEntries());

    case INGEST_RATE:
      return new Double(getIngestRate());

    case QUERY_RATE:
      return new Double(getQueryRate());

    case SPLIT_CREATION_TIME:
      return new Long(getSplitCreationTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXTENT:
      return isSetExtent();
    case MAJOR:
      return isSetMajor();
    case MINOR:
      return isSetMinor();
    case SPLIT:
      return isSetSplit();
    case NUM_ENTRIES:
      return isSetNumEntries();
    case INGEST_RATE:
      return isSetIngestRate();
    case QUERY_RATE:
      return isSetQueryRate();
    case SPLIT_CREATION_TIME:
      return isSetSplitCreationTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TabletStats)
      return this.equals((TabletStats)that);
    return false;
  }

  public boolean equals(TabletStats that) {
    if (that == null)
      return false;

    boolean this_present_extent = true && this.isSetExtent();
    boolean that_present_extent = true && that.isSetExtent();
    if (this_present_extent || that_present_extent) {
      if (!(this_present_extent && that_present_extent))
        return false;
      if (!this.extent.equals(that.extent))
        return false;
    }

    boolean this_present_major = true && this.isSetMajor();
    boolean that_present_major = true && that.isSetMajor();
    if (this_present_major || that_present_major) {
      if (!(this_present_major && that_present_major))
        return false;
      if (!this.major.equals(that.major))
        return false;
    }

    boolean this_present_minor = true && this.isSetMinor();
    boolean that_present_minor = true && that.isSetMinor();
    if (this_present_minor || that_present_minor) {
      if (!(this_present_minor && that_present_minor))
        return false;
      if (!this.minor.equals(that.minor))
        return false;
    }

    boolean this_present_split = true && this.isSetSplit();
    boolean that_present_split = true && that.isSetSplit();
    if (this_present_split || that_present_split) {
      if (!(this_present_split && that_present_split))
        return false;
      if (!this.split.equals(that.split))
        return false;
    }

    boolean this_present_numEntries = true;
    boolean that_present_numEntries = true;
    if (this_present_numEntries || that_present_numEntries) {
      if (!(this_present_numEntries && that_present_numEntries))
        return false;
      if (this.numEntries != that.numEntries)
        return false;
    }

    boolean this_present_ingestRate = true;
    boolean that_present_ingestRate = true;
    if (this_present_ingestRate || that_present_ingestRate) {
      if (!(this_present_ingestRate && that_present_ingestRate))
        return false;
      if (this.ingestRate != that.ingestRate)
        return false;
    }

    boolean this_present_queryRate = true;
    boolean that_present_queryRate = true;
    if (this_present_queryRate || that_present_queryRate) {
      if (!(this_present_queryRate && that_present_queryRate))
        return false;
      if (this.queryRate != that.queryRate)
        return false;
    }

    boolean this_present_splitCreationTime = true;
    boolean that_present_splitCreationTime = true;
    if (this_present_splitCreationTime || that_present_splitCreationTime) {
      if (!(this_present_splitCreationTime && that_present_splitCreationTime))
        return false;
      if (this.splitCreationTime != that.splitCreationTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TabletStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TabletStats typedOther = (TabletStats)other;

    lastComparison = Boolean.valueOf(isSetExtent()).compareTo(typedOther.isSetExtent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extent, typedOther.extent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajor()).compareTo(typedOther.isSetMajor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.major, typedOther.major);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinor()).compareTo(typedOther.isSetMinor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minor, typedOther.minor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplit()).compareTo(typedOther.isSetSplit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split, typedOther.split);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumEntries()).compareTo(typedOther.isSetNumEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numEntries, typedOther.numEntries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIngestRate()).compareTo(typedOther.isSetIngestRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIngestRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ingestRate, typedOther.ingestRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryRate()).compareTo(typedOther.isSetQueryRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryRate, typedOther.queryRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplitCreationTime()).compareTo(typedOther.isSetSplitCreationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplitCreationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitCreationTime, typedOther.splitCreationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EXTENT
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.extent = new org.apache.accumulo.core.data.thrift.TKeyExtent();
            this.extent.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MAJOR
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.major = new ActionStats();
            this.major.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MINOR
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.minor = new ActionStats();
            this.minor.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SPLIT
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.split = new ActionStats();
            this.split.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // NUM_ENTRIES
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.numEntries = iprot.readI64();
            setNumEntriesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // INGEST_RATE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.ingestRate = iprot.readDouble();
            setIngestRateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // QUERY_RATE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.queryRate = iprot.readDouble();
            setQueryRateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SPLIT_CREATION_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.splitCreationTime = iprot.readI64();
            setSplitCreationTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.extent != null) {
      oprot.writeFieldBegin(EXTENT_FIELD_DESC);
      this.extent.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.major != null) {
      oprot.writeFieldBegin(MAJOR_FIELD_DESC);
      this.major.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.minor != null) {
      oprot.writeFieldBegin(MINOR_FIELD_DESC);
      this.minor.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.split != null) {
      oprot.writeFieldBegin(SPLIT_FIELD_DESC);
      this.split.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NUM_ENTRIES_FIELD_DESC);
    oprot.writeI64(this.numEntries);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INGEST_RATE_FIELD_DESC);
    oprot.writeDouble(this.ingestRate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUERY_RATE_FIELD_DESC);
    oprot.writeDouble(this.queryRate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPLIT_CREATION_TIME_FIELD_DESC);
    oprot.writeI64(this.splitCreationTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TabletStats(");
    boolean first = true;

    sb.append("extent:");
    if (this.extent == null) {
      sb.append("null");
    } else {
      sb.append(this.extent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("major:");
    if (this.major == null) {
      sb.append("null");
    } else {
      sb.append(this.major);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minor:");
    if (this.minor == null) {
      sb.append("null");
    } else {
      sb.append(this.minor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("split:");
    if (this.split == null) {
      sb.append("null");
    } else {
      sb.append(this.split);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numEntries:");
    sb.append(this.numEntries);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ingestRate:");
    sb.append(this.ingestRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryRate:");
    sb.append(this.queryRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("splitCreationTime:");
    sb.append(this.splitCreationTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

