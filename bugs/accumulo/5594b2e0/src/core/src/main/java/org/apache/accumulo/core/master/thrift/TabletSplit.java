/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.master.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class TabletSplit implements org.apache.thrift.TBase<TabletSplit, TabletSplit._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TabletSplit");

  private static final org.apache.thrift.protocol.TField OLD_TABLET_FIELD_DESC = new org.apache.thrift.protocol.TField("oldTablet", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_TABLETS_FIELD_DESC = new org.apache.thrift.protocol.TField("newTablets", org.apache.thrift.protocol.TType.LIST, (short)2);

  public org.apache.accumulo.core.data.thrift.TKeyExtent oldTablet;
  public List<org.apache.accumulo.core.data.thrift.TKeyExtent> newTablets;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OLD_TABLET((short)1, "oldTablet"),
    NEW_TABLETS((short)2, "newTablets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OLD_TABLET
          return OLD_TABLET;
        case 2: // NEW_TABLETS
          return NEW_TABLETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OLD_TABLET, new org.apache.thrift.meta_data.FieldMetaData("oldTablet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.accumulo.core.data.thrift.TKeyExtent.class)));
    tmpMap.put(_Fields.NEW_TABLETS, new org.apache.thrift.meta_data.FieldMetaData("newTablets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.accumulo.core.data.thrift.TKeyExtent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TabletSplit.class, metaDataMap);
  }

  public TabletSplit() {
  }

  public TabletSplit(
    org.apache.accumulo.core.data.thrift.TKeyExtent oldTablet,
    List<org.apache.accumulo.core.data.thrift.TKeyExtent> newTablets)
  {
    this();
    this.oldTablet = oldTablet;
    this.newTablets = newTablets;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TabletSplit(TabletSplit other) {
    if (other.isSetOldTablet()) {
      this.oldTablet = new org.apache.accumulo.core.data.thrift.TKeyExtent(other.oldTablet);
    }
    if (other.isSetNewTablets()) {
      List<org.apache.accumulo.core.data.thrift.TKeyExtent> __this__newTablets = new ArrayList<org.apache.accumulo.core.data.thrift.TKeyExtent>();
      for (org.apache.accumulo.core.data.thrift.TKeyExtent other_element : other.newTablets) {
        __this__newTablets.add(new org.apache.accumulo.core.data.thrift.TKeyExtent(other_element));
      }
      this.newTablets = __this__newTablets;
    }
  }

  public TabletSplit deepCopy() {
    return new TabletSplit(this);
  }

  @Override
  public void clear() {
    this.oldTablet = null;
    this.newTablets = null;
  }

  public org.apache.accumulo.core.data.thrift.TKeyExtent getOldTablet() {
    return this.oldTablet;
  }

  public TabletSplit setOldTablet(org.apache.accumulo.core.data.thrift.TKeyExtent oldTablet) {
    this.oldTablet = oldTablet;
    return this;
  }

  public void unsetOldTablet() {
    this.oldTablet = null;
  }

  /** Returns true if field oldTablet is set (has been assigned a value) and false otherwise */
  public boolean isSetOldTablet() {
    return this.oldTablet != null;
  }

  public void setOldTabletIsSet(boolean value) {
    if (!value) {
      this.oldTablet = null;
    }
  }

  public int getNewTabletsSize() {
    return (this.newTablets == null) ? 0 : this.newTablets.size();
  }

  public java.util.Iterator<org.apache.accumulo.core.data.thrift.TKeyExtent> getNewTabletsIterator() {
    return (this.newTablets == null) ? null : this.newTablets.iterator();
  }

  public void addToNewTablets(org.apache.accumulo.core.data.thrift.TKeyExtent elem) {
    if (this.newTablets == null) {
      this.newTablets = new ArrayList<org.apache.accumulo.core.data.thrift.TKeyExtent>();
    }
    this.newTablets.add(elem);
  }

  public List<org.apache.accumulo.core.data.thrift.TKeyExtent> getNewTablets() {
    return this.newTablets;
  }

  public TabletSplit setNewTablets(List<org.apache.accumulo.core.data.thrift.TKeyExtent> newTablets) {
    this.newTablets = newTablets;
    return this;
  }

  public void unsetNewTablets() {
    this.newTablets = null;
  }

  /** Returns true if field newTablets is set (has been assigned a value) and false otherwise */
  public boolean isSetNewTablets() {
    return this.newTablets != null;
  }

  public void setNewTabletsIsSet(boolean value) {
    if (!value) {
      this.newTablets = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OLD_TABLET:
      if (value == null) {
        unsetOldTablet();
      } else {
        setOldTablet((org.apache.accumulo.core.data.thrift.TKeyExtent)value);
      }
      break;

    case NEW_TABLETS:
      if (value == null) {
        unsetNewTablets();
      } else {
        setNewTablets((List<org.apache.accumulo.core.data.thrift.TKeyExtent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OLD_TABLET:
      return getOldTablet();

    case NEW_TABLETS:
      return getNewTablets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OLD_TABLET:
      return isSetOldTablet();
    case NEW_TABLETS:
      return isSetNewTablets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TabletSplit)
      return this.equals((TabletSplit)that);
    return false;
  }

  public boolean equals(TabletSplit that) {
    if (that == null)
      return false;

    boolean this_present_oldTablet = true && this.isSetOldTablet();
    boolean that_present_oldTablet = true && that.isSetOldTablet();
    if (this_present_oldTablet || that_present_oldTablet) {
      if (!(this_present_oldTablet && that_present_oldTablet))
        return false;
      if (!this.oldTablet.equals(that.oldTablet))
        return false;
    }

    boolean this_present_newTablets = true && this.isSetNewTablets();
    boolean that_present_newTablets = true && that.isSetNewTablets();
    if (this_present_newTablets || that_present_newTablets) {
      if (!(this_present_newTablets && that_present_newTablets))
        return false;
      if (!this.newTablets.equals(that.newTablets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TabletSplit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TabletSplit typedOther = (TabletSplit)other;

    lastComparison = Boolean.valueOf(isSetOldTablet()).compareTo(typedOther.isSetOldTablet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldTablet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldTablet, typedOther.oldTablet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewTablets()).compareTo(typedOther.isSetNewTablets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewTablets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTablets, typedOther.newTablets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // OLD_TABLET
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.oldTablet = new org.apache.accumulo.core.data.thrift.TKeyExtent();
            this.oldTablet.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NEW_TABLETS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
              this.newTablets = new ArrayList<org.apache.accumulo.core.data.thrift.TKeyExtent>(_list43.size);
              for (int _i44 = 0; _i44 < _list43.size; ++_i44)
              {
                org.apache.accumulo.core.data.thrift.TKeyExtent _elem45;
                _elem45 = new org.apache.accumulo.core.data.thrift.TKeyExtent();
                _elem45.read(iprot);
                this.newTablets.add(_elem45);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.oldTablet != null) {
      oprot.writeFieldBegin(OLD_TABLET_FIELD_DESC);
      this.oldTablet.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.newTablets != null) {
      oprot.writeFieldBegin(NEW_TABLETS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.newTablets.size()));
        for (org.apache.accumulo.core.data.thrift.TKeyExtent _iter46 : this.newTablets)
        {
          _iter46.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TabletSplit(");
    boolean first = true;

    sb.append("oldTablet:");
    if (this.oldTablet == null) {
      sb.append("null");
    } else {
      sb.append(this.oldTablet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newTablets:");
    if (this.newTablets == null) {
      sb.append("null");
    } else {
      sb.append(this.newTablets);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

