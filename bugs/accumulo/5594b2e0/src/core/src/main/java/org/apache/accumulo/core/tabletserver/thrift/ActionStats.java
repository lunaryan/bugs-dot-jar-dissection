/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.tabletserver.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class ActionStats implements org.apache.thrift.TBase<ActionStats, ActionStats._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActionStats");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ELAPSED_FIELD_DESC = new org.apache.thrift.protocol.TField("elapsed", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SUM_DEV_FIELD_DESC = new org.apache.thrift.protocol.TField("sumDev", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QUEUE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueTime", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField QUEUE_SUM_DEV_FIELD_DESC = new org.apache.thrift.protocol.TField("queueSumDev", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  public int status;
  public double elapsed;
  public int num;
  public long count;
  public double sumDev;
  public int fail;
  public double queueTime;
  public double queueSumDev;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    ELAPSED((short)2, "elapsed"),
    NUM((short)3, "num"),
    COUNT((short)4, "count"),
    SUM_DEV((short)5, "sumDev"),
    FAIL((short)6, "fail"),
    QUEUE_TIME((short)7, "queueTime"),
    QUEUE_SUM_DEV((short)8, "queueSumDev");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // ELAPSED
          return ELAPSED;
        case 3: // NUM
          return NUM;
        case 4: // COUNT
          return COUNT;
        case 5: // SUM_DEV
          return SUM_DEV;
        case 6: // FAIL
          return FAIL;
        case 7: // QUEUE_TIME
          return QUEUE_TIME;
        case 8: // QUEUE_SUM_DEV
          return QUEUE_SUM_DEV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __ELAPSED_ISSET_ID = 1;
  private static final int __NUM_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private static final int __SUMDEV_ISSET_ID = 4;
  private static final int __FAIL_ISSET_ID = 5;
  private static final int __QUEUETIME_ISSET_ID = 6;
  private static final int __QUEUESUMDEV_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ELAPSED, new org.apache.thrift.meta_data.FieldMetaData("elapsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUM_DEV, new org.apache.thrift.meta_data.FieldMetaData("sumDev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_TIME, new org.apache.thrift.meta_data.FieldMetaData("queueTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUEUE_SUM_DEV, new org.apache.thrift.meta_data.FieldMetaData("queueSumDev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActionStats.class, metaDataMap);
  }

  public ActionStats() {
  }

  public ActionStats(
    int status,
    double elapsed,
    int num,
    long count,
    double sumDev,
    int fail,
    double queueTime,
    double queueSumDev)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
    this.elapsed = elapsed;
    setElapsedIsSet(true);
    this.num = num;
    setNumIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.sumDev = sumDev;
    setSumDevIsSet(true);
    this.fail = fail;
    setFailIsSet(true);
    this.queueTime = queueTime;
    setQueueTimeIsSet(true);
    this.queueSumDev = queueSumDev;
    setQueueSumDevIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActionStats(ActionStats other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.status = other.status;
    this.elapsed = other.elapsed;
    this.num = other.num;
    this.count = other.count;
    this.sumDev = other.sumDev;
    this.fail = other.fail;
    this.queueTime = other.queueTime;
    this.queueSumDev = other.queueSumDev;
  }

  public ActionStats deepCopy() {
    return new ActionStats(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    setElapsedIsSet(false);
    this.elapsed = 0.0;
    setNumIsSet(false);
    this.num = 0;
    setCountIsSet(false);
    this.count = 0;
    setSumDevIsSet(false);
    this.sumDev = 0.0;
    setFailIsSet(false);
    this.fail = 0;
    setQueueTimeIsSet(false);
    this.queueTime = 0.0;
    setQueueSumDevIsSet(false);
    this.queueSumDev = 0.0;
  }

  public int getStatus() {
    return this.status;
  }

  public ActionStats setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public double getElapsed() {
    return this.elapsed;
  }

  public ActionStats setElapsed(double elapsed) {
    this.elapsed = elapsed;
    setElapsedIsSet(true);
    return this;
  }

  public void unsetElapsed() {
    __isset_bit_vector.clear(__ELAPSED_ISSET_ID);
  }

  /** Returns true if field elapsed is set (has been assigned a value) and false otherwise */
  public boolean isSetElapsed() {
    return __isset_bit_vector.get(__ELAPSED_ISSET_ID);
  }

  public void setElapsedIsSet(boolean value) {
    __isset_bit_vector.set(__ELAPSED_ISSET_ID, value);
  }

  public int getNum() {
    return this.num;
  }

  public ActionStats setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bit_vector.clear(__NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return __isset_bit_vector.get(__NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_ISSET_ID, value);
  }

  public long getCount() {
    return this.count;
  }

  public ActionStats setCount(long count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  public double getSumDev() {
    return this.sumDev;
  }

  public ActionStats setSumDev(double sumDev) {
    this.sumDev = sumDev;
    setSumDevIsSet(true);
    return this;
  }

  public void unsetSumDev() {
    __isset_bit_vector.clear(__SUMDEV_ISSET_ID);
  }

  /** Returns true if field sumDev is set (has been assigned a value) and false otherwise */
  public boolean isSetSumDev() {
    return __isset_bit_vector.get(__SUMDEV_ISSET_ID);
  }

  public void setSumDevIsSet(boolean value) {
    __isset_bit_vector.set(__SUMDEV_ISSET_ID, value);
  }

  public int getFail() {
    return this.fail;
  }

  public ActionStats setFail(int fail) {
    this.fail = fail;
    setFailIsSet(true);
    return this;
  }

  public void unsetFail() {
    __isset_bit_vector.clear(__FAIL_ISSET_ID);
  }

  /** Returns true if field fail is set (has been assigned a value) and false otherwise */
  public boolean isSetFail() {
    return __isset_bit_vector.get(__FAIL_ISSET_ID);
  }

  public void setFailIsSet(boolean value) {
    __isset_bit_vector.set(__FAIL_ISSET_ID, value);
  }

  public double getQueueTime() {
    return this.queueTime;
  }

  public ActionStats setQueueTime(double queueTime) {
    this.queueTime = queueTime;
    setQueueTimeIsSet(true);
    return this;
  }

  public void unsetQueueTime() {
    __isset_bit_vector.clear(__QUEUETIME_ISSET_ID);
  }

  /** Returns true if field queueTime is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueTime() {
    return __isset_bit_vector.get(__QUEUETIME_ISSET_ID);
  }

  public void setQueueTimeIsSet(boolean value) {
    __isset_bit_vector.set(__QUEUETIME_ISSET_ID, value);
  }

  public double getQueueSumDev() {
    return this.queueSumDev;
  }

  public ActionStats setQueueSumDev(double queueSumDev) {
    this.queueSumDev = queueSumDev;
    setQueueSumDevIsSet(true);
    return this;
  }

  public void unsetQueueSumDev() {
    __isset_bit_vector.clear(__QUEUESUMDEV_ISSET_ID);
  }

  /** Returns true if field queueSumDev is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueSumDev() {
    return __isset_bit_vector.get(__QUEUESUMDEV_ISSET_ID);
  }

  public void setQueueSumDevIsSet(boolean value) {
    __isset_bit_vector.set(__QUEUESUMDEV_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ELAPSED:
      if (value == null) {
        unsetElapsed();
      } else {
        setElapsed((Double)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Long)value);
      }
      break;

    case SUM_DEV:
      if (value == null) {
        unsetSumDev();
      } else {
        setSumDev((Double)value);
      }
      break;

    case FAIL:
      if (value == null) {
        unsetFail();
      } else {
        setFail((Integer)value);
      }
      break;

    case QUEUE_TIME:
      if (value == null) {
        unsetQueueTime();
      } else {
        setQueueTime((Double)value);
      }
      break;

    case QUEUE_SUM_DEV:
      if (value == null) {
        unsetQueueSumDev();
      } else {
        setQueueSumDev((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return new Integer(getStatus());

    case ELAPSED:
      return new Double(getElapsed());

    case NUM:
      return new Integer(getNum());

    case COUNT:
      return new Long(getCount());

    case SUM_DEV:
      return new Double(getSumDev());

    case FAIL:
      return new Integer(getFail());

    case QUEUE_TIME:
      return new Double(getQueueTime());

    case QUEUE_SUM_DEV:
      return new Double(getQueueSumDev());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case ELAPSED:
      return isSetElapsed();
    case NUM:
      return isSetNum();
    case COUNT:
      return isSetCount();
    case SUM_DEV:
      return isSetSumDev();
    case FAIL:
      return isSetFail();
    case QUEUE_TIME:
      return isSetQueueTime();
    case QUEUE_SUM_DEV:
      return isSetQueueSumDev();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActionStats)
      return this.equals((ActionStats)that);
    return false;
  }

  public boolean equals(ActionStats that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_elapsed = true;
    boolean that_present_elapsed = true;
    if (this_present_elapsed || that_present_elapsed) {
      if (!(this_present_elapsed && that_present_elapsed))
        return false;
      if (this.elapsed != that.elapsed)
        return false;
    }

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_sumDev = true;
    boolean that_present_sumDev = true;
    if (this_present_sumDev || that_present_sumDev) {
      if (!(this_present_sumDev && that_present_sumDev))
        return false;
      if (this.sumDev != that.sumDev)
        return false;
    }

    boolean this_present_fail = true;
    boolean that_present_fail = true;
    if (this_present_fail || that_present_fail) {
      if (!(this_present_fail && that_present_fail))
        return false;
      if (this.fail != that.fail)
        return false;
    }

    boolean this_present_queueTime = true;
    boolean that_present_queueTime = true;
    if (this_present_queueTime || that_present_queueTime) {
      if (!(this_present_queueTime && that_present_queueTime))
        return false;
      if (this.queueTime != that.queueTime)
        return false;
    }

    boolean this_present_queueSumDev = true;
    boolean that_present_queueSumDev = true;
    if (this_present_queueSumDev || that_present_queueSumDev) {
      if (!(this_present_queueSumDev && that_present_queueSumDev))
        return false;
      if (this.queueSumDev != that.queueSumDev)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActionStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActionStats typedOther = (ActionStats)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElapsed()).compareTo(typedOther.isSetElapsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElapsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elapsed, typedOther.elapsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, typedOther.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSumDev()).compareTo(typedOther.isSetSumDev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumDev()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sumDev, typedOther.sumDev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFail()).compareTo(typedOther.isSetFail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, typedOther.fail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueTime()).compareTo(typedOther.isSetQueueTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueTime, typedOther.queueTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueSumDev()).compareTo(typedOther.isSetQueueSumDev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueSumDev()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueSumDev, typedOther.queueSumDev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STATUS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ELAPSED
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.elapsed = iprot.readDouble();
            setElapsedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NUM
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num = iprot.readI32();
            setNumIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COUNT
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.count = iprot.readI64();
            setCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SUM_DEV
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.sumDev = iprot.readDouble();
            setSumDevIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // FAIL
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.fail = iprot.readI32();
            setFailIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // QUEUE_TIME
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.queueTime = iprot.readDouble();
            setQueueTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // QUEUE_SUM_DEV
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.queueSumDev = iprot.readDouble();
            setQueueSumDevIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ELAPSED_FIELD_DESC);
    oprot.writeDouble(this.elapsed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_FIELD_DESC);
    oprot.writeI32(this.num);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI64(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SUM_DEV_FIELD_DESC);
    oprot.writeDouble(this.sumDev);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FAIL_FIELD_DESC);
    oprot.writeI32(this.fail);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUEUE_TIME_FIELD_DESC);
    oprot.writeDouble(this.queueTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUEUE_SUM_DEV_FIELD_DESC);
    oprot.writeDouble(this.queueSumDev);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActionStats(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("elapsed:");
    sb.append(this.elapsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sumDev:");
    sb.append(this.sumDev);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fail:");
    sb.append(this.fail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueTime:");
    sb.append(this.queueTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueSumDev:");
    sb.append(this.queueSumDev);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

